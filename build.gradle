plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = buildVersionString()
group = mod_group_id
base.archivesName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Switch to Java 8 for easier compatibility
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Datagen stuff (why not ?)
sourceSets {
	main {
		resources {
			srcDirs = [
				'src/main/resources',
				'src/generated/resources'
			]
		}
	}
    
	datagen {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    generateRunFolders = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
        	property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
        }

        server {
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'immersiveengineering'

            mods {
                "${mod_id}" {
                    source sourceSets.datagen
                }
            }
        }
    }
}

repositories {
    maven { name = "BlameJared";    url = "https://maven.blamejared.com/" }         // IE & CT Files
    maven { name = "DVS1 Maven FS"; url = "https://dvs1.progwml6.com/files/maven" } // JEI & Tinkers Files
    maven { name = "ModMaven"; url = "https://modmaven.k-4u.nl" }

    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    implementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${minecraft_version}-5.1.0-148")
    datagenImplementation("blusunrize.immersiveengineering:ImmersiveEngineering:${minecraft_version}-5.1.0-148:datagen")
    implementation fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:7.1.2.527")
    
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:7.8.0.1011:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:7.8.0.1011")

    runtimeOnly fg.deobf("blank:ImmersivePetroleum-${minecraft_version}:3.4.0-20")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: "${version}",
            mod_authors: mod_authors, mod_description: mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : "${version}",
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': getDateLastCommit()
        ])
}

    finalizedBy 'reobfJar'
}

String buildVersionString()
{
    def lastCommitDateFormatted = getDateLastCommit().format("MMddyy").toString()
    return "${minecraft_version}-${mod_version}-${lastCommitDateFormatted}"
}

Date getDateLastCommit()
{
    // Get the date of the last commit
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format=%cd', '--date=format:%Y%m%d'
        standardOutput = stdout
    }

    def dateFormat = new java.text.SimpleDateFormat("yyyyMMdd")
    return dateFormat.parse(stdout.toString().trim())
}

tasks.named('publish').configure {
    dependsOn 'reobfJar'
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) { type 'jar'; builtBy 'reobfJar'; }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
